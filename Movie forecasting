{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "\bmovie.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "mount_file_id": "1ZneJ0Ij-TVL3IK07rgPeBfUjJoTqpbqe",
      "authorship_tag": "ABX9TyObp7cLBq37ls8nvNrG3AcL",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/joungminhee/Project/blob/master/%EC%98%81%ED%99%94%20%EA%B4%80%EA%B0%9D%20%EC%88%98%20%EC%98%88%EC%B8%A1%20%EA%B0%9C%EB%B0%9C.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 라이브러리 임포트"
      ],
      "metadata": {
        "id": "H3rIIMc5t8Yl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!sudo apt-get install -y fonts-nanum\n",
        "!sudo fc-cache -fv\n",
        "!rm ~/.cache/matplotlib -rf\n",
        "# 코렙에서 한글 깨짐 현상 있을때 설치 후 밑코드로 해결완료\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.rc('font', family='NanumBarunGothic') "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nyYeJvdJxW4X",
        "outputId": "3fdf427e-2c8e-4eac-9bc5-eba88bade69f"
      },
      "execution_count": 331,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Reading package lists... Done\n",
            "Building dependency tree       \n",
            "Reading state information... Done\n",
            "fonts-nanum is already the newest version (20170925-1).\n",
            "The following package was automatically installed and is no longer required:\n",
            "  libnvidia-common-460\n",
            "Use 'sudo apt autoremove' to remove it.\n",
            "0 upgraded, 0 newly installed, 0 to remove and 49 not upgraded.\n",
            "/usr/share/fonts: caching, new cache contents: 0 fonts, 1 dirs\n",
            "/usr/share/fonts/truetype: caching, new cache contents: 0 fonts, 3 dirs\n",
            "/usr/share/fonts/truetype/humor-sans: caching, new cache contents: 1 fonts, 0 dirs\n",
            "/usr/share/fonts/truetype/liberation: caching, new cache contents: 16 fonts, 0 dirs\n",
            "/usr/share/fonts/truetype/nanum: caching, new cache contents: 10 fonts, 0 dirs\n",
            "/usr/local/share/fonts: caching, new cache contents: 0 fonts, 0 dirs\n",
            "/root/.local/share/fonts: skipping, no such directory\n",
            "/root/.fonts: skipping, no such directory\n",
            "/var/cache/fontconfig: cleaning cache directory\n",
            "/root/.cache/fontconfig: not cleaning non-existent cache directory\n",
            "/root/.fontconfig: not cleaning non-existent cache directory\n",
            "fc-cache: succeeded\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 332,
      "metadata": {
        "id": "Nb_j2-HVs64j"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 데이터 준비"
      ],
      "metadata": {
        "id": "FElLyoIOuHbV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = '/content/drive/MyDrive/Data/movies_train.csv'\n",
        "data2 = '/content/drive/MyDrive/Data/movies_test.csv'\n",
        "data3 = '/content/drive/MyDrive/Data/submission.csv'"
      ],
      "metadata": {
        "id": "cVFjLMdPuGyH"
      },
      "execution_count": 333,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train = pd.read_csv(data)\n",
        "test = pd.read_csv(data2)\n",
        "data3 = pd.read_csv(data3)"
      ],
      "metadata": {
        "id": "N8g2HgHzuUPe"
      },
      "execution_count": 334,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xknY7TRhuZ_H",
        "outputId": "6d583335-b6f7-4ca4-831d-50183a2f873d"
      },
      "execution_count": 335,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 600 entries, 0 to 599\n",
            "Data columns (total 12 columns):\n",
            " #   Column          Non-Null Count  Dtype  \n",
            "---  ------          --------------  -----  \n",
            " 0   title           600 non-null    object \n",
            " 1   distributor     600 non-null    object \n",
            " 2   genre           600 non-null    object \n",
            " 3   release_time    600 non-null    object \n",
            " 4   time            600 non-null    int64  \n",
            " 5   screening_rat   600 non-null    object \n",
            " 6   director        600 non-null    object \n",
            " 7   dir_prev_bfnum  270 non-null    float64\n",
            " 8   dir_prev_num    600 non-null    int64  \n",
            " 9   num_staff       600 non-null    int64  \n",
            " 10  num_actor       600 non-null    int64  \n",
            " 11  box_off_num     600 non-null    int64  \n",
            "dtypes: float64(1), int64(5), object(6)\n",
            "memory usage: 56.4+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kLZs2zuTuduk",
        "outputId": "fb1c174b-b0a4-4911-dbe8-0d3d7f21b75a"
      },
      "execution_count": 336,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 243 entries, 0 to 242\n",
            "Data columns (total 11 columns):\n",
            " #   Column          Non-Null Count  Dtype  \n",
            "---  ------          --------------  -----  \n",
            " 0   title           243 non-null    object \n",
            " 1   distributor     243 non-null    object \n",
            " 2   genre           243 non-null    object \n",
            " 3   release_time    243 non-null    object \n",
            " 4   time            243 non-null    int64  \n",
            " 5   screening_rat   243 non-null    object \n",
            " 6   director        243 non-null    object \n",
            " 7   dir_prev_bfnum  107 non-null    float64\n",
            " 8   dir_prev_num    243 non-null    int64  \n",
            " 9   num_staff       243 non-null    int64  \n",
            " 10  num_actor       243 non-null    int64  \n",
            "dtypes: float64(1), int64(4), object(6)\n",
            "memory usage: 21.0+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train.shape, test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hkj4p1eFuf55",
        "outputId": "6e47bb92-27d6-4f37-fd04-f0a3b56f90aa"
      },
      "execution_count": 337,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((600, 12), (243, 11))"
            ]
          },
          "metadata": {},
          "execution_count": 337
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# object의 기술통계량\n",
        "train.describe(include='object')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "vQsZNaNoujkL",
        "outputId": "b234f843-3a81-4f94-9a16-8b16fd74f64c"
      },
      "execution_count": 338,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         title distributor genre release_time screening_rat director\n",
              "count      600         600   600          600           600      600\n",
              "unique     600         169    12          330             4      472\n",
              "top     개들의 전쟁   CJ 엔터테인먼트   드라마   2015-10-22      청소년 관람불가      홍상수\n",
              "freq         1          54   221            6           204        7"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c0ca9b87-3e1e-4068-a5ca-54b342c5dc66\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>title</th>\n",
              "      <th>distributor</th>\n",
              "      <th>genre</th>\n",
              "      <th>release_time</th>\n",
              "      <th>screening_rat</th>\n",
              "      <th>director</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>600</td>\n",
              "      <td>600</td>\n",
              "      <td>600</td>\n",
              "      <td>600</td>\n",
              "      <td>600</td>\n",
              "      <td>600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>600</td>\n",
              "      <td>169</td>\n",
              "      <td>12</td>\n",
              "      <td>330</td>\n",
              "      <td>4</td>\n",
              "      <td>472</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>개들의 전쟁</td>\n",
              "      <td>CJ 엔터테인먼트</td>\n",
              "      <td>드라마</td>\n",
              "      <td>2015-10-22</td>\n",
              "      <td>청소년 관람불가</td>\n",
              "      <td>홍상수</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>1</td>\n",
              "      <td>54</td>\n",
              "      <td>221</td>\n",
              "      <td>6</td>\n",
              "      <td>204</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c0ca9b87-3e1e-4068-a5ca-54b342c5dc66')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c0ca9b87-3e1e-4068-a5ca-54b342c5dc66 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c0ca9b87-3e1e-4068-a5ca-54b342c5dc66');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 338
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 392
        },
        "id": "KjT0MeKrv5KZ",
        "outputId": "90dc9891-bd66-456b-9a64-ee66e2c2adbb"
      },
      "execution_count": 339,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       title   distributor genre release_time  time screening_rat director  \\\n",
              "0     개들의 전쟁      롯데엔터테인먼트    액션   2012-11-22    96      청소년 관람불가      조병옥   \n",
              "1       내부자들        (주)쇼박스   느와르   2015-11-19   130      청소년 관람불가      우민호   \n",
              "2  은밀하게 위대하게        (주)쇼박스    액션   2013-06-05   123       15세 관람가      장철수   \n",
              "3   나는 공무원이다        (주)NEW   코미디   2012-07-12   101        전체 관람가      구자홍   \n",
              "4       불량남녀  쇼박스(주)미디어플렉스   코미디   2010-11-04   108       15세 관람가      신근호   \n",
              "\n",
              "   dir_prev_bfnum  dir_prev_num  num_staff  num_actor  box_off_num  \n",
              "0             NaN             0         91          2        23398  \n",
              "1      1161602.50             2        387          3      7072501  \n",
              "2       220775.25             4        343          4      6959083  \n",
              "3        23894.00             2         20          6       217866  \n",
              "4            1.00             1        251          2       483387  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-07e5830b-4ecf-4ce6-ab05-e015ae1c95e6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>title</th>\n",
              "      <th>distributor</th>\n",
              "      <th>genre</th>\n",
              "      <th>release_time</th>\n",
              "      <th>time</th>\n",
              "      <th>screening_rat</th>\n",
              "      <th>director</th>\n",
              "      <th>dir_prev_bfnum</th>\n",
              "      <th>dir_prev_num</th>\n",
              "      <th>num_staff</th>\n",
              "      <th>num_actor</th>\n",
              "      <th>box_off_num</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>개들의 전쟁</td>\n",
              "      <td>롯데엔터테인먼트</td>\n",
              "      <td>액션</td>\n",
              "      <td>2012-11-22</td>\n",
              "      <td>96</td>\n",
              "      <td>청소년 관람불가</td>\n",
              "      <td>조병옥</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>91</td>\n",
              "      <td>2</td>\n",
              "      <td>23398</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>내부자들</td>\n",
              "      <td>(주)쇼박스</td>\n",
              "      <td>느와르</td>\n",
              "      <td>2015-11-19</td>\n",
              "      <td>130</td>\n",
              "      <td>청소년 관람불가</td>\n",
              "      <td>우민호</td>\n",
              "      <td>1161602.50</td>\n",
              "      <td>2</td>\n",
              "      <td>387</td>\n",
              "      <td>3</td>\n",
              "      <td>7072501</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>은밀하게 위대하게</td>\n",
              "      <td>(주)쇼박스</td>\n",
              "      <td>액션</td>\n",
              "      <td>2013-06-05</td>\n",
              "      <td>123</td>\n",
              "      <td>15세 관람가</td>\n",
              "      <td>장철수</td>\n",
              "      <td>220775.25</td>\n",
              "      <td>4</td>\n",
              "      <td>343</td>\n",
              "      <td>4</td>\n",
              "      <td>6959083</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>나는 공무원이다</td>\n",
              "      <td>(주)NEW</td>\n",
              "      <td>코미디</td>\n",
              "      <td>2012-07-12</td>\n",
              "      <td>101</td>\n",
              "      <td>전체 관람가</td>\n",
              "      <td>구자홍</td>\n",
              "      <td>23894.00</td>\n",
              "      <td>2</td>\n",
              "      <td>20</td>\n",
              "      <td>6</td>\n",
              "      <td>217866</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>불량남녀</td>\n",
              "      <td>쇼박스(주)미디어플렉스</td>\n",
              "      <td>코미디</td>\n",
              "      <td>2010-11-04</td>\n",
              "      <td>108</td>\n",
              "      <td>15세 관람가</td>\n",
              "      <td>신근호</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1</td>\n",
              "      <td>251</td>\n",
              "      <td>2</td>\n",
              "      <td>483387</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-07e5830b-4ecf-4ce6-ab05-e015ae1c95e6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-07e5830b-4ecf-4ce6-ab05-e015ae1c95e6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-07e5830b-4ecf-4ce6-ab05-e015ae1c95e6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 339
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 데이터 탐색"
      ],
      "metadata": {
        "id": "D7kD1uESoWWK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1RMiLw4yoP6G",
        "outputId": "3afeb201-e4cd-49c6-e905-c640ce372d28"
      },
      "execution_count": 340,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['title', 'distributor', 'genre', 'release_time', 'time',\n",
              "       'screening_rat', 'director', 'dir_prev_bfnum', 'dir_prev_num',\n",
              "       'num_staff', 'num_actor', 'box_off_num'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 340
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 각 배급별 제작횟수\n",
        "train.distributor.value_counts().head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NzEtqcDVzyDb",
        "outputId": "46eee814-fe38-4fdf-d3d0-669270b87abd"
      },
      "execution_count": 341,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "CJ 엔터테인먼트    54\n",
              "롯데엔터테인먼트     52\n",
              "(주)NEW       30\n",
              "(주)마운틴픽쳐스    29\n",
              "(주)쇼박스       26\n",
              "Name: distributor, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 341
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train.distributor.unique()\n",
        "# 많아서 전처리 때 컬럼 삭제할 예정"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OKtTyMAf13tn",
        "outputId": "d846f087-b415-4234-e41c-6dd7a1dc0739"
      },
      "execution_count": 342,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['롯데엔터테인먼트', '(주)쇼박스', '(주)NEW', '쇼박스(주)미디어플렉스', '백두대간',\n",
              "       '유니버설픽쳐스인터내셔널코리아', '(주)두타연', '(주) 케이알씨지', '(주)콘텐츠 윙', '(주)키노아이',\n",
              "       '(주)팝 파트너스', 'CJ E&M 영화부문', '(주) 영화제작전원사', 'CJ E&M Pictures',\n",
              "       'CGV 무비꼴라쥬', '리틀빅픽처스', '스폰지', 'CJ 엔터테인먼트', 'CGV아트하우스', '조이앤시네마',\n",
              "       '인디플러그', '콘텐츠판다', '인디스토리', '(주)팝엔터테인먼트', '시네마서비스', '웃기씨네',\n",
              "       '영화사 진진', '(주)레인보우 팩토리', '김기덕 필름', 'NEW', 'CJ CGV',\n",
              "       '동국대학교 충무로영상제작센터', 'BoXoo 엔터테인먼트', '(주)마운틴픽쳐스', 'CGV 아트하우스',\n",
              "       '메가박스(주)플러스엠', '골든타이드픽처스', '파이오니아21', '디 씨드', '드림팩트 엔터테인먼트', '시너지',\n",
              "       '디마엔터테인먼트', '판다미디어', '(주)스톰픽쳐스코리아', '(주)예지림 엔터테인먼트', '(주) 영화사조제',\n",
              "       '보람엔터테인먼트', '(주)시네마달', '노바엔터테인먼트', '(주)패스파인더씨앤씨', '(주)대명문화공장',\n",
              "       '(주)온비즈넷', 'KT&G 상상마당', '무비꼴라쥬', '인벤트 디', '씨네그루(주)키다리이엔티',\n",
              "       '스튜디오후크', '시네마 달', '나이너스엔터테인먼트(주)', 'THE 픽쳐스', '영구아트무비', '리틀빅픽쳐스',\n",
              "       '어뮤즈', '이모션 픽처스', '(주)이스트스카이필름', '필라멘트 픽쳐스', '조이앤컨텐츠그룹', '타임스토리그룹',\n",
              "       '마운틴 픽처스', '(주)휘엔터테인먼트', '이십세기폭스코리아(주)', '(주)피터팬픽쳐스', '에스와이코마드',\n",
              "       '(주)더픽쳐스', '오퍼스픽쳐스', '(주)고앤고 필름', '사람과 사람들', '(주)JK필름',\n",
              "       '씨너스엔터테인먼트(주)', 'KT', '싸이더스FNH', '(주)프레인글로벌', '나우콘텐츠', '홀리가든',\n",
              "       '(주) 브릿지웍스', '(주)엣나인필름', '위더스필름', '시네마달', '(주)에이원 엔터테인먼트',\n",
              "       'OAL(올)', '싸이더스', '전망좋은영화사', '스토리셋', '이상우필름', '씨네굿필름', '영희야놀자',\n",
              "       '찬란', '어썸 피플', '아방가르드 필름', '스크린조이', '와이드릴리즈(주)', 'tvN',\n",
              "       '(주) 액티버스엔터테인먼트', '더픽쳐스/(주)마운틴픽쳐스', '제나두 엔터테인먼트', '(주)아이필름코퍼레이션',\n",
              "       '쟈비스미디어', '트리필름', '에스피엠', '(주)리틀빅픽처스', '건시네마', '키노엔터테인먼트',\n",
              "       '(주)아우라픽처스', '에이블엔터테인먼트', '드림로드', '인피니티엔터테인먼트', '새인컴퍼니',\n",
              "       '스튜디오 느림보', '와이드 릴리즈(주)', '필름라인', 'M2픽처스', '고구마공작소', '(주)미디어데이',\n",
              "       '마노엔터테인먼트', '화앤담이엔티', '(주)스마일이엔티', '(주)패뷸러스', '싸이더스 FNH', '영화사 조아',\n",
              "       '판씨네마(주)', '두 엔터테인먼트', '(주)마인스 엔터테인먼트', '전주국제영화제', '(주)마인스엔터테인먼트',\n",
              "       '상구네 필름', '케이엠스타', '(주)유비네트워크', '한국YWCA연합회', 'KBS미디어(주)', '더 피플',\n",
              "       '위드시네마', '팜코리아미디어', '(주)씨엠닉스', 'SBS콘텐츠허브', '인터콘미디어', '(주)유비콘텐츠',\n",
              "       '프로젝트 엠피', '하준사', '(주)노버스엔터테인먼트', '주머니필름', '롤러코스터 프로덕션', 'SK플래닛',\n",
              "       '서울독립영화제', '스튜디오 블루', '(주)랠리버튼', '(주)드림팩트엔터테인먼트', '에이원 엔터테인먼트',\n",
              "       '머스트 씨 무비', 'SK텔레콤(주)', '마법사필름', '스폰지이엔티', '(주)로드하우스', '미라클 필름',\n",
              "       '프리비젼 엔터테인먼트', '영화사 廊', '크리에이티브컴즈(주)', 'ysfilm', '이달투', '퍼스트런'],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 342
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 상위 10위의 관람객수\n",
        "top10 = train.sort_values('box_off_num', ascending=False).head(10)\n",
        "top10"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 566
        },
        "id": "tXeDhHxbuBOr",
        "outputId": "31e051b9-f841-45ae-f7e3-db1fd2793d17"
      },
      "execution_count": 343,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            title distributor genre release_time  time screening_rat director  \\\n",
              "372          국제시장   CJ 엔터테인먼트   드라마   2014-12-17   126       12세 관람가      윤제균   \n",
              "362           도둑들      (주)쇼박스   느와르   2012-07-25   135       15세 관람가      최동훈   \n",
              "530       7번방의 선물      (주)NEW   코미디   2013-01-23   127       15세 관람가      이환경   \n",
              "498            암살      (주)쇼박스    액션   2015-07-22   139       15세 관람가      최동훈   \n",
              "460   광해, 왕이 된 남자   CJ 엔터테인먼트   드라마   2012-09-13   131       15세 관람가      추창민   \n",
              "122           변호인      (주)NEW   드라마   2013-12-18   127       15세 관람가      양우석   \n",
              "496          설국열차   CJ 엔터테인먼트    SF   2013-08-01   125       15세 관람가      봉준호   \n",
              "101            관상      (주)쇼박스   드라마   2013-09-11   139       15세 관람가      한재림   \n",
              "505  해적: 바다로 간 산적    롯데엔터테인먼트    SF   2014-08-06   130       12세 관람가      이석훈   \n",
              "476        수상한 그녀   CJ 엔터테인먼트   코미디   2014-01-22   124       15세 관람가      황동혁   \n",
              "\n",
              "     dir_prev_bfnum  dir_prev_num  num_staff  num_actor  box_off_num  \n",
              "372             NaN             0        869          4     14262766  \n",
              "362    2.564692e+06             3        462         10     12983841  \n",
              "530    8.190495e+05             2        300          8     12811435  \n",
              "498    5.169479e+06             4        628          3     12706663  \n",
              "460    1.552541e+06             2        402          3     12323595  \n",
              "122             NaN             0        311          5     11374879  \n",
              "496             NaN             0         67         10      9350351  \n",
              "101    1.242778e+06             2        298          6      9135806  \n",
              "505    1.843895e+06             3        868          2      8666208  \n",
              "476    2.781990e+06             2        437          5      8659725  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bdc57443-a049-4819-bfd6-91a1790f71c9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>title</th>\n",
              "      <th>distributor</th>\n",
              "      <th>genre</th>\n",
              "      <th>release_time</th>\n",
              "      <th>time</th>\n",
              "      <th>screening_rat</th>\n",
              "      <th>director</th>\n",
              "      <th>dir_prev_bfnum</th>\n",
              "      <th>dir_prev_num</th>\n",
              "      <th>num_staff</th>\n",
              "      <th>num_actor</th>\n",
              "      <th>box_off_num</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>372</th>\n",
              "      <td>국제시장</td>\n",
              "      <td>CJ 엔터테인먼트</td>\n",
              "      <td>드라마</td>\n",
              "      <td>2014-12-17</td>\n",
              "      <td>126</td>\n",
              "      <td>12세 관람가</td>\n",
              "      <td>윤제균</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>869</td>\n",
              "      <td>4</td>\n",
              "      <td>14262766</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>362</th>\n",
              "      <td>도둑들</td>\n",
              "      <td>(주)쇼박스</td>\n",
              "      <td>느와르</td>\n",
              "      <td>2012-07-25</td>\n",
              "      <td>135</td>\n",
              "      <td>15세 관람가</td>\n",
              "      <td>최동훈</td>\n",
              "      <td>2.564692e+06</td>\n",
              "      <td>3</td>\n",
              "      <td>462</td>\n",
              "      <td>10</td>\n",
              "      <td>12983841</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>530</th>\n",
              "      <td>7번방의 선물</td>\n",
              "      <td>(주)NEW</td>\n",
              "      <td>코미디</td>\n",
              "      <td>2013-01-23</td>\n",
              "      <td>127</td>\n",
              "      <td>15세 관람가</td>\n",
              "      <td>이환경</td>\n",
              "      <td>8.190495e+05</td>\n",
              "      <td>2</td>\n",
              "      <td>300</td>\n",
              "      <td>8</td>\n",
              "      <td>12811435</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>498</th>\n",
              "      <td>암살</td>\n",
              "      <td>(주)쇼박스</td>\n",
              "      <td>액션</td>\n",
              "      <td>2015-07-22</td>\n",
              "      <td>139</td>\n",
              "      <td>15세 관람가</td>\n",
              "      <td>최동훈</td>\n",
              "      <td>5.169479e+06</td>\n",
              "      <td>4</td>\n",
              "      <td>628</td>\n",
              "      <td>3</td>\n",
              "      <td>12706663</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>460</th>\n",
              "      <td>광해, 왕이 된 남자</td>\n",
              "      <td>CJ 엔터테인먼트</td>\n",
              "      <td>드라마</td>\n",
              "      <td>2012-09-13</td>\n",
              "      <td>131</td>\n",
              "      <td>15세 관람가</td>\n",
              "      <td>추창민</td>\n",
              "      <td>1.552541e+06</td>\n",
              "      <td>2</td>\n",
              "      <td>402</td>\n",
              "      <td>3</td>\n",
              "      <td>12323595</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>122</th>\n",
              "      <td>변호인</td>\n",
              "      <td>(주)NEW</td>\n",
              "      <td>드라마</td>\n",
              "      <td>2013-12-18</td>\n",
              "      <td>127</td>\n",
              "      <td>15세 관람가</td>\n",
              "      <td>양우석</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>311</td>\n",
              "      <td>5</td>\n",
              "      <td>11374879</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>496</th>\n",
              "      <td>설국열차</td>\n",
              "      <td>CJ 엔터테인먼트</td>\n",
              "      <td>SF</td>\n",
              "      <td>2013-08-01</td>\n",
              "      <td>125</td>\n",
              "      <td>15세 관람가</td>\n",
              "      <td>봉준호</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>67</td>\n",
              "      <td>10</td>\n",
              "      <td>9350351</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>101</th>\n",
              "      <td>관상</td>\n",
              "      <td>(주)쇼박스</td>\n",
              "      <td>드라마</td>\n",
              "      <td>2013-09-11</td>\n",
              "      <td>139</td>\n",
              "      <td>15세 관람가</td>\n",
              "      <td>한재림</td>\n",
              "      <td>1.242778e+06</td>\n",
              "      <td>2</td>\n",
              "      <td>298</td>\n",
              "      <td>6</td>\n",
              "      <td>9135806</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>505</th>\n",
              "      <td>해적: 바다로 간 산적</td>\n",
              "      <td>롯데엔터테인먼트</td>\n",
              "      <td>SF</td>\n",
              "      <td>2014-08-06</td>\n",
              "      <td>130</td>\n",
              "      <td>12세 관람가</td>\n",
              "      <td>이석훈</td>\n",
              "      <td>1.843895e+06</td>\n",
              "      <td>3</td>\n",
              "      <td>868</td>\n",
              "      <td>2</td>\n",
              "      <td>8666208</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>476</th>\n",
              "      <td>수상한 그녀</td>\n",
              "      <td>CJ 엔터테인먼트</td>\n",
              "      <td>코미디</td>\n",
              "      <td>2014-01-22</td>\n",
              "      <td>124</td>\n",
              "      <td>15세 관람가</td>\n",
              "      <td>황동혁</td>\n",
              "      <td>2.781990e+06</td>\n",
              "      <td>2</td>\n",
              "      <td>437</td>\n",
              "      <td>5</td>\n",
              "      <td>8659725</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bdc57443-a049-4819-bfd6-91a1790f71c9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-bdc57443-a049-4819-bfd6-91a1790f71c9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-bdc57443-a049-4819-bfd6-91a1790f71c9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 343
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 상위 10개의 배급별 제작횟수\n",
        "top10.distributor.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3DvUMHKdwLWc",
        "outputId": "27e37dfd-ff3e-400c-f93a-cbbf7cfb0689"
      },
      "execution_count": 344,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "CJ 엔터테인먼트    4\n",
              "(주)쇼박스       3\n",
              "(주)NEW       2\n",
              "롯데엔터테인먼트     1\n",
              "Name: distributor, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 344
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 장르별 관람객 수 \n",
        "sns.barplot(data=train, y='genre', x='box_off_num', ci=None)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "H8WaI_oanOGr",
        "outputId": "c9a0668d-0c0e-4f39-b68b-2e0023b99be6"
      },
      "execution_count": 345,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 감독별로 제작한 횟수\n",
        "train.director.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dg63RLSIv806",
        "outputId": "c325ec68-7102-4bf4-e9d1-f8823d8dd8ab"
      },
      "execution_count": 346,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "홍상수           7\n",
              "장률            4\n",
              "신재호           4\n",
              "우민호           4\n",
              "노진수           4\n",
              "             ..\n",
              "권오광           1\n",
              "한윤선           1\n",
              "박찬경           1\n",
              "New Pistol    1\n",
              "백운학           1\n",
              "Name: director, Length: 472, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 346
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 장르별 제작횟수\n",
        "train.genre.value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "srIA-L2_z-d8",
        "outputId": "29a52df6-c63b-44a2-ad33-a48ae1c358a4"
      },
      "execution_count": 347,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "드라마       221\n",
              "다큐멘터리      93\n",
              "멜로/로맨스     78\n",
              "코미디        53\n",
              "공포         42\n",
              "액션         28\n",
              "느와르        27\n",
              "애니메이션      21\n",
              "미스터리       17\n",
              "SF         13\n",
              "뮤지컬         5\n",
              "서스펜스        2\n",
              "Name: genre, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 347
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 각 관람가연령별 장르별 갯수\n",
        "train.groupby('screening_rat')['genre'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JCYtOgzlv_-Z",
        "outputId": "12fc744b-62ca-4e43-99d3-9550cb57648e"
      },
      "execution_count": 348,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "screening_rat  genre \n",
              "12세 관람가        드라마       50\n",
              "               다큐멘터리     23\n",
              "               멜로/로맨스    10\n",
              "               코미디       10\n",
              "               SF         3\n",
              "               애니메이션      3\n",
              "               공포         1\n",
              "               뮤지컬        1\n",
              "               액션         1\n",
              "15세 관람가        드라마       76\n",
              "               코미디       28\n",
              "               멜로/로맨스    21\n",
              "               공포        19\n",
              "               다큐멘터리     17\n",
              "               액션        16\n",
              "               느와르        9\n",
              "               미스터리       9\n",
              "               SF         6\n",
              "               애니메이션      1\n",
              "전체 관람가         다큐멘터리     52\n",
              "               드라마       17\n",
              "               애니메이션     14\n",
              "               뮤지컬        4\n",
              "               코미디        3\n",
              "               SF         1\n",
              "               멜로/로맨스     1\n",
              "청소년 관람불가       드라마       78\n",
              "               멜로/로맨스    46\n",
              "               공포        22\n",
              "               느와르       18\n",
              "               코미디       12\n",
              "               액션        11\n",
              "               미스터리       8\n",
              "               SF         3\n",
              "               애니메이션      3\n",
              "               서스펜스       2\n",
              "               다큐멘터리      1\n",
              "Name: genre, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 348
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x='screening_rat', data=train)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "wiSnk4EBxzcE",
        "outputId": "b7228035-2d06-4348-eb79-3744978e6b37"
      },
      "execution_count": 349,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.heatmap(train.isnull(), cbar=False)\n",
        "plt.show()\n",
        "\n",
        "# 지영님이 알려주신 Null 시각화 히트맵 적용해봄 :)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 332
        },
        "id": "X6lSQSWWwhzv",
        "outputId": "951b6d55-02ff-471e-f250-3ff174ed563b"
      },
      "execution_count": 350,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 영화배우별수와 관람객 수 \n",
        "sns.barplot(x='num_actor' , y='box_off_num', data=train, ci=None)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        },
        "id": "4XoNVp65vAB5",
        "outputId": "526273b9-aedc-4d93-c12b-feb022377179"
      },
      "execution_count": 351,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# time 구간화 위해 기술통계량 확인\n",
        "train.time.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l6ui4uqUdh4_",
        "outputId": "021164d9-8e47-4650-94d2-5481124859b5"
      },
      "execution_count": 352,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    600.000000\n",
              "mean     100.863333\n",
              "std       18.097528\n",
              "min       45.000000\n",
              "25%       89.000000\n",
              "50%      100.000000\n",
              "75%      114.000000\n",
              "max      180.000000\n",
              "Name: time, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 352
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train.dir_prev_bfnum.mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NsTWUuW5tYfE",
        "outputId": "bdbb3b0e-1641-4cc7-b602-ecb5b2cf0e97"
      },
      "execution_count": 353,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1050442.8914197532"
            ]
          },
          "metadata": {},
          "execution_count": 353
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 데이터 전처리"
      ],
      "metadata": {
        "id": "vhYhUq_IzMDg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 결측치 대체"
      ],
      "metadata": {
        "id": "3cPOW9aFxka9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train.dir_prev_bfnum.fillna(0).mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D3FdWKgTwwZg",
        "outputId": "e14320f8-23af-4685-c011-57b60339a434"
      },
      "execution_count": 354,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "472699.30113888887"
            ]
          },
          "metadata": {},
          "execution_count": 354
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train.dir_prev_bfnum.mean()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uPm_mNyCy-fO",
        "outputId": "eb45deae-fe5e-4f59-ef5f-9120366d8211"
      },
      "execution_count": 355,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1050442.8914197532"
            ]
          },
          "metadata": {},
          "execution_count": 355
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train = train.fillna(0)\n",
        "test = test.fillna(0)"
      ],
      "metadata": {
        "id": "DILUR9qR0g0b"
      },
      "execution_count": 356,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TasYd12G2GyW",
        "outputId": "5b400573-81a9-452f-8816-86fc9dd4ae9a"
      },
      "execution_count": 357,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "title             0\n",
              "distributor       0\n",
              "genre             0\n",
              "release_time      0\n",
              "time              0\n",
              "screening_rat     0\n",
              "director          0\n",
              "dir_prev_bfnum    0\n",
              "dir_prev_num      0\n",
              "num_staff         0\n",
              "num_actor         0\n",
              "box_off_num       0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 357
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iG02lGx42Dro",
        "outputId": "1ea1649d-ef04-4585-a546-4ffa805b0801"
      },
      "execution_count": 358,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "title             0\n",
              "distributor       0\n",
              "genre             0\n",
              "release_time      0\n",
              "time              0\n",
              "screening_rat     0\n",
              "director          0\n",
              "dir_prev_bfnum    0\n",
              "dir_prev_num      0\n",
              "num_staff         0\n",
              "num_actor         0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 358
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## time 구간화"
      ],
      "metadata": {
        "id": "sfn93Gv_xn_l"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#time 구간화 위해, 파생변수 생성\n",
        "bins = [45,90,120,185]\n",
        "labels = ['1.5h','2h미만','2h이상']\n",
        "\n",
        "train['time'] = pd.cut(train.time, bins, labels=labels, right=False)\n",
        "test['time']= pd.cut(test.time, bins, labels=labels, right=False)\n",
        "# right=False 로 지정시 우측 범위를 포함하지 않는다.\n",
        "# 현정님이 알려주신 time 구간화 적용해봄 :) "
      ],
      "metadata": {
        "id": "1uCF9qirdqfx"
      },
      "execution_count": 359,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "deNbo-Icw8fP",
        "outputId": "29af736c-af04-4bee-a8d9-34ab41b9769d"
      },
      "execution_count": 360,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 600 entries, 0 to 599\n",
            "Data columns (total 12 columns):\n",
            " #   Column          Non-Null Count  Dtype   \n",
            "---  ------          --------------  -----   \n",
            " 0   title           600 non-null    object  \n",
            " 1   distributor     600 non-null    object  \n",
            " 2   genre           600 non-null    object  \n",
            " 3   release_time    600 non-null    object  \n",
            " 4   time            600 non-null    category\n",
            " 5   screening_rat   600 non-null    object  \n",
            " 6   director        600 non-null    object  \n",
            " 7   dir_prev_bfnum  600 non-null    float64 \n",
            " 8   dir_prev_num    600 non-null    int64   \n",
            " 9   num_staff       600 non-null    int64   \n",
            " 10  num_actor       600 non-null    int64   \n",
            " 11  box_off_num     600 non-null    int64   \n",
            "dtypes: category(1), float64(1), int64(4), object(6)\n",
            "memory usage: 52.4+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train[train['time'].isnull()]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 113
        },
        "id": "moVf07X9xDT7",
        "outputId": "26df1881-c05f-4cd7-db6d-cf95793f1b91"
      },
      "execution_count": 361,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [title, distributor, genre, release_time, time, screening_rat, director, dir_prev_bfnum, dir_prev_num, num_staff, num_actor, box_off_num]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8e25f5d5-644e-4063-9912-0222b2bb0190\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>title</th>\n",
              "      <th>distributor</th>\n",
              "      <th>genre</th>\n",
              "      <th>release_time</th>\n",
              "      <th>time</th>\n",
              "      <th>screening_rat</th>\n",
              "      <th>director</th>\n",
              "      <th>dir_prev_bfnum</th>\n",
              "      <th>dir_prev_num</th>\n",
              "      <th>num_staff</th>\n",
              "      <th>num_actor</th>\n",
              "      <th>box_off_num</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8e25f5d5-644e-4063-9912-0222b2bb0190')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8e25f5d5-644e-4063-9912-0222b2bb0190 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8e25f5d5-644e-4063-9912-0222b2bb0190');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 361
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train = pd.get_dummies(train, columns=['time'])\n",
        "test = pd.get_dummies(test, columns=['time'])"
      ],
      "metadata": {
        "id": "gePhcrRkyCK2"
      },
      "execution_count": 362,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train.shape, test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rfnrggo1ycSW",
        "outputId": "8e069299-5c5d-4604-d482-079ba4e963db"
      },
      "execution_count": 363,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((600, 14), (243, 13))"
            ]
          },
          "metadata": {},
          "execution_count": 363
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 종속변수 생성\n",
        "box_num = train.pop('box_off_num')"
      ],
      "metadata": {
        "id": "nNXINg09Gz15"
      },
      "execution_count": 364,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train.shape, test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2t0wDkYey7Ht",
        "outputId": "7afe43ea-6f74-4e42-b96a-541860f4c09c"
      },
      "execution_count": 365,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((600, 13), (243, 13))"
            ]
          },
          "metadata": {},
          "execution_count": 365
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 카테고리 더미화"
      ],
      "metadata": {
        "id": "GOp6dgeaoZ85"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# distributor 배급사 상위 5개 제외 모두 기타로 처리\n",
        "distributor_list = train.distributor.value_counts()[:5]\n",
        "def func(distributor):\n",
        "    if distributor in distributor_list:\n",
        "        return distributor\n",
        "    else:\n",
        "        return '기타'\n",
        "\n",
        "train['distributor'] = train['distributor'].apply(lambda x : func(x))\n",
        "test['distributor'] = test['distributor'].apply(lambda x : func(x))"
      ],
      "metadata": {
        "id": "E-QnBTlQmWZd"
      },
      "execution_count": 366,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 장르별 라벨인코딩\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "cols = ['genre','screening_rat','distributor']\n",
        "for col in cols:\n",
        "    le = LabelEncoder() #모델생성\n",
        "    train[col] = le.fit_transform(train[col])\n",
        "    test[col]= le.transform(test[col])"
      ],
      "metadata": {
        "id": "PAbu5v3zkV6y"
      },
      "execution_count": 367,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0MgeifLamtB6",
        "outputId": "42f9ebbc-f4d1-4777-a8d9-bd5cecbe4eae"
      },
      "execution_count": 368,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 600 entries, 0 to 599\n",
            "Data columns (total 13 columns):\n",
            " #   Column          Non-Null Count  Dtype  \n",
            "---  ------          --------------  -----  \n",
            " 0   title           600 non-null    object \n",
            " 1   distributor     600 non-null    int64  \n",
            " 2   genre           600 non-null    int64  \n",
            " 3   release_time    600 non-null    object \n",
            " 4   screening_rat   600 non-null    int64  \n",
            " 5   director        600 non-null    object \n",
            " 6   dir_prev_bfnum  600 non-null    float64\n",
            " 7   dir_prev_num    600 non-null    int64  \n",
            " 8   num_staff       600 non-null    int64  \n",
            " 9   num_actor       600 non-null    int64  \n",
            " 10  time_1.5h       600 non-null    uint8  \n",
            " 11  time_2h미만       600 non-null    uint8  \n",
            " 12  time_2h이상       600 non-null    uint8  \n",
            "dtypes: float64(1), int64(6), object(3), uint8(3)\n",
            "memory usage: 48.8+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train.shape, test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XmjZu4uqlZs_",
        "outputId": "b6174d18-f6da-4288-edce-8f65182125bd"
      },
      "execution_count": 369,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((600, 13), (243, 13))"
            ]
          },
          "metadata": {},
          "execution_count": 369
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 필요없는 컬럼 제거"
      ],
      "metadata": {
        "id": "NgQmdczqxqkv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 필요없는 columns 제거\n",
        "train = train.drop(columns=['title','director'])\n",
        "test = test.drop(columns=['title','director'])"
      ],
      "metadata": {
        "id": "eO532kMIz1E2"
      },
      "execution_count": 370,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train.shape, test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H1XGbsijm4tL",
        "outputId": "41b5dc13-340a-420f-da59-487f1e99897c"
      },
      "execution_count": 371,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((600, 11), (243, 11))"
            ]
          },
          "metadata": {},
          "execution_count": 371
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "id": "WGKMPBAftwMO",
        "outputId": "5eac1fe0-9eb3-4aa2-9a59-910738f90b9e"
      },
      "execution_count": 372,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   distributor  genre release_time  screening_rat  dir_prev_bfnum  \\\n",
              "0            5     10   2012-11-22              3            0.00   \n",
              "1            2      2   2015-11-19              3      1161602.50   \n",
              "2            2     10   2013-06-05              1       220775.25   \n",
              "3            0     11   2012-07-12              2        23894.00   \n",
              "4            4     11   2010-11-04              1            1.00   \n",
              "\n",
              "   dir_prev_num  num_staff  num_actor  time_1.5h  time_2h미만  time_2h이상  \n",
              "0             0         91          2          0          1          0  \n",
              "1             2        387          3          0          0          1  \n",
              "2             4        343          4          0          0          1  \n",
              "3             2         20          6          0          1          0  \n",
              "4             1        251          2          0          1          0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0df7f7e3-b811-44b4-9330-7f71458c7aab\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>distributor</th>\n",
              "      <th>genre</th>\n",
              "      <th>release_time</th>\n",
              "      <th>screening_rat</th>\n",
              "      <th>dir_prev_bfnum</th>\n",
              "      <th>dir_prev_num</th>\n",
              "      <th>num_staff</th>\n",
              "      <th>num_actor</th>\n",
              "      <th>time_1.5h</th>\n",
              "      <th>time_2h미만</th>\n",
              "      <th>time_2h이상</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5</td>\n",
              "      <td>10</td>\n",
              "      <td>2012-11-22</td>\n",
              "      <td>3</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>91</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2015-11-19</td>\n",
              "      <td>3</td>\n",
              "      <td>1161602.50</td>\n",
              "      <td>2</td>\n",
              "      <td>387</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "      <td>2013-06-05</td>\n",
              "      <td>1</td>\n",
              "      <td>220775.25</td>\n",
              "      <td>4</td>\n",
              "      <td>343</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>11</td>\n",
              "      <td>2012-07-12</td>\n",
              "      <td>2</td>\n",
              "      <td>23894.00</td>\n",
              "      <td>2</td>\n",
              "      <td>20</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>11</td>\n",
              "      <td>2010-11-04</td>\n",
              "      <td>1</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1</td>\n",
              "      <td>251</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0df7f7e3-b811-44b4-9330-7f71458c7aab')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0df7f7e3-b811-44b4-9330-7f71458c7aab button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0df7f7e3-b811-44b4-9330-7f71458c7aab');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 372
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 파생변수 생성"
      ],
      "metadata": {
        "id": "fIxe5weTx1ta"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# datetime으로 type변경\n",
        "train['release_time'] = pd.to_datetime(train['release_time'])"
      ],
      "metadata": {
        "id": "9IyfCOpRDgu3"
      },
      "execution_count": 373,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# to_datetime 바꾸기\n",
        "train['year'] = train['release_time'].dt.year\n",
        "train['mon'] = train['release_time'].dt.month\n",
        "train['day'] = train['release_time'].dt.day\n",
        "# Can only use .dt accessor with datetimelike values\n",
        "# type을 datetime으로 변경 후 dt.year 코드 적용이 되는걸 알 수 있음."
      ],
      "metadata": {
        "id": "BqcUOr9MCVZh"
      },
      "execution_count": 374,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train.info()\n",
        "# year 파생변수와 release_time이 datetime으로 바뀐 것을 알 수 있음.\n",
        "# 필요없는 release_time 지우기 - > 나중에 모델훈련때 오류 가능성 제외하기 위해서\n",
        "train = train.drop(columns='release_time')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GZwmgGtUDw7i",
        "outputId": "aff1a468-ce48-4350-c76f-7331a4935c81"
      },
      "execution_count": 375,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 600 entries, 0 to 599\n",
            "Data columns (total 14 columns):\n",
            " #   Column          Non-Null Count  Dtype         \n",
            "---  ------          --------------  -----         \n",
            " 0   distributor     600 non-null    int64         \n",
            " 1   genre           600 non-null    int64         \n",
            " 2   release_time    600 non-null    datetime64[ns]\n",
            " 3   screening_rat   600 non-null    int64         \n",
            " 4   dir_prev_bfnum  600 non-null    float64       \n",
            " 5   dir_prev_num    600 non-null    int64         \n",
            " 6   num_staff       600 non-null    int64         \n",
            " 7   num_actor       600 non-null    int64         \n",
            " 8   time_1.5h       600 non-null    uint8         \n",
            " 9   time_2h미만       600 non-null    uint8         \n",
            " 10  time_2h이상       600 non-null    uint8         \n",
            " 11  year            600 non-null    int64         \n",
            " 12  mon             600 non-null    int64         \n",
            " 13  day             600 non-null    int64         \n",
            "dtypes: datetime64[ns](1), float64(1), int64(9), uint8(3)\n",
            "memory usage: 53.4 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train.shape, test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "friInAFeEocx",
        "outputId": "ab943618-fc5e-4ddd-bdd5-6ac95dcc247c"
      },
      "execution_count": 376,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((600, 13), (243, 11))"
            ]
          },
          "metadata": {},
          "execution_count": 376
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 테스트 컬럼과 트레인 컬럼의 갯수를 맞추기 위해 to_datetime을 test에도 적용시킴\n",
        "\n",
        "test['release_time'] = pd.to_datetime(test['release_time'])\n",
        "test['year'] = test['release_time'].dt.year\n",
        "test['mon'] = test['release_time'].dt.month\n",
        "test['day'] = test['release_time'].dt.day\n",
        "test = test.drop(columns='release_time')"
      ],
      "metadata": {
        "id": "UwgfuB1TEre6"
      },
      "execution_count": 377,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train.shape , test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QqKTO9UtHnVM",
        "outputId": "01b5a909-47ae-4935-9f0f-4a0ceb3b7e42"
      },
      "execution_count": 378,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((600, 13), (243, 13))"
            ]
          },
          "metadata": {},
          "execution_count": 378
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "id": "Gd5jz51cs5q_",
        "outputId": "b5e02fb0-e97d-4754-bdc1-75d081ba54f7"
      },
      "execution_count": 379,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   distributor  genre  screening_rat  dir_prev_bfnum  dir_prev_num  num_staff  \\\n",
              "0            5     10              3            0.00             0         91   \n",
              "1            2      2              3      1161602.50             2        387   \n",
              "2            2     10              1       220775.25             4        343   \n",
              "3            0     11              2        23894.00             2         20   \n",
              "4            4     11              1            1.00             1        251   \n",
              "\n",
              "   num_actor  time_1.5h  time_2h미만  time_2h이상  year  mon  day  \n",
              "0          2          0          1          0  2012   11   22  \n",
              "1          3          0          0          1  2015   11   19  \n",
              "2          4          0          0          1  2013    6    5  \n",
              "3          6          0          1          0  2012    7   12  \n",
              "4          2          0          1          0  2010   11    4  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-10503950-532f-4739-bea0-3296cebe8d99\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>distributor</th>\n",
              "      <th>genre</th>\n",
              "      <th>screening_rat</th>\n",
              "      <th>dir_prev_bfnum</th>\n",
              "      <th>dir_prev_num</th>\n",
              "      <th>num_staff</th>\n",
              "      <th>num_actor</th>\n",
              "      <th>time_1.5h</th>\n",
              "      <th>time_2h미만</th>\n",
              "      <th>time_2h이상</th>\n",
              "      <th>year</th>\n",
              "      <th>mon</th>\n",
              "      <th>day</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5</td>\n",
              "      <td>10</td>\n",
              "      <td>3</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "      <td>91</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2012</td>\n",
              "      <td>11</td>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>1161602.50</td>\n",
              "      <td>2</td>\n",
              "      <td>387</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2015</td>\n",
              "      <td>11</td>\n",
              "      <td>19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>220775.25</td>\n",
              "      <td>4</td>\n",
              "      <td>343</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2013</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>11</td>\n",
              "      <td>2</td>\n",
              "      <td>23894.00</td>\n",
              "      <td>2</td>\n",
              "      <td>20</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2012</td>\n",
              "      <td>7</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>11</td>\n",
              "      <td>1</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1</td>\n",
              "      <td>251</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2010</td>\n",
              "      <td>11</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-10503950-532f-4739-bea0-3296cebe8d99')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-10503950-532f-4739-bea0-3296cebe8d99 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-10503950-532f-4739-bea0-3296cebe8d99');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 379
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 데이터 모델링"
      ],
      "metadata": {
        "id": "pwV0w1Fy0Gm-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# import sklearn.metrics\n",
        "# print(help(sklearn.metrics.f1_score))\n",
        "# 함수가 생각안난다면 이런식으로 찾아서 사용가능!"
      ],
      "metadata": {
        "id": "Jky2Wh6N_XKt"
      },
      "execution_count": 380,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from xgboost import XGBClassifier\n",
        "from sklearn.metrics import confusion_matrix , f1_score , mean_squared_error\n",
        "from sklearn.preprocessing import LabelEncoder, OrdinalEncoder"
      ],
      "metadata": {
        "id": "EYVQrWjbp6rO"
      },
      "execution_count": 381,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = train.values.copy()\n",
        "y = box_num.values.copy()"
      ],
      "metadata": {
        "id": "VROhwQAirVxc"
      },
      "execution_count": 382,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y[:3]\n",
        "# 1차원 배열인지 확인하기 위해서"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oj6pmiknH34E",
        "outputId": "94c93e09-43d2-4aa6-e617-5ba00ce45133"
      },
      "execution_count": 383,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([  23398, 7072501, 6959083])"
            ]
          },
          "metadata": {},
          "execution_count": 383
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_tr, X_te, y_tr, y_te =train_test_split(X,y,\n",
        "                                         test_size=0.3,\n",
        "                                         random_state=42)"
      ],
      "metadata": {
        "id": "Mw4gR6cGrPOt"
      },
      "execution_count": 384,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "* 랜덤포레스트"
      ],
      "metadata": {
        "id": "ov4kSArRpRFO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = Pipeline([('scaler', StandardScaler() ),\n",
        "                 ('reg', RandomForestRegressor(max_depth=5,n_jobs=-1, n_estimators=1000,\n",
        "                                               max_samples=30,random_state=42))])"
      ],
      "metadata": {
        "id": "W1xTV658_5If"
      },
      "execution_count": 385,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit(X_tr,y_tr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CwygAXfJrRml",
        "outputId": "3aa067cd-92e1-43d7-9e5d-219e6e54989f"
      },
      "execution_count": 386,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pipeline(steps=[('scaler', StandardScaler()),\n",
              "                ('reg',\n",
              "                 RandomForestRegressor(max_depth=5, max_samples=30,\n",
              "                                       n_estimators=1000, n_jobs=-1,\n",
              "                                       random_state=42))])"
            ]
          },
          "metadata": {},
          "execution_count": 386
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.score(X_tr,y_tr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yico-BK-LlLK",
        "outputId": "85b43ee8-282d-41a0-d822-c6fe8bea8c6c"
      },
      "execution_count": 387,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.4240501168248254"
            ]
          },
          "metadata": {},
          "execution_count": 387
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.score(X_te,y_te)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B-7ayvb8LnIQ",
        "outputId": "46305c21-f3b1-4039-b1ab-e1130de25cdd"
      },
      "execution_count": 388,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.28329958228784324"
            ]
          },
          "metadata": {},
          "execution_count": 388
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "te_pred = model.predict(X_te)"
      ],
      "metadata": {
        "id": "LYK4zhWAJvux"
      },
      "execution_count": 389,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Rmse\n",
        "print(f' RMSE score :', np.sqrt(mean_squared_error(y_te,te_pred)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eYZloUyyIWAG",
        "outputId": "6d61542e-b828-4a6d-b86a-56544d98a46b"
      },
      "execution_count": 390,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " RMSE score : 1062330.198716851\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "* XGBoost"
      ],
      "metadata": {
        "id": "3GCSSywaikXs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import xgboost as xgb"
      ],
      "metadata": {
        "id": "uWUnUwlLmkMW"
      },
      "execution_count": 391,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_model = Pipeline([('scaler', StandardScaler() ),\n",
        "                  ('reg', xgb.XGBRegressor(colsample_bytree = 0.4, n_jobs=-1,\n",
        "                    max_depth = 4, alpha = 6, n_estimators =10))])"
      ],
      "metadata": {
        "id": "PnPy9U0enLt0"
      },
      "execution_count": 480,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_model.fit(X_tr, y_tr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LQWsKk5Lm5Id",
        "outputId": "2611a763-265a-4adf-be93-38b8bbee0650"
      },
      "execution_count": 481,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[14:33:35] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pipeline(steps=[('scaler', StandardScaler()),\n",
              "                ('reg',\n",
              "                 XGBRegressor(alpha=6, colsample_bytree=0.4, max_depth=4,\n",
              "                              n_estimators=10, n_jobs=-1))])"
            ]
          },
          "metadata": {},
          "execution_count": 481
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_model.score(X_te,y_te)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dTutIYpPdpQZ",
        "outputId": "aa197f33-1432-43ec-ee75-1c5023723f0f"
      },
      "execution_count": 482,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.4183610090758385"
            ]
          },
          "metadata": {},
          "execution_count": 482
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "te_pred = x_model.predict(X_te)"
      ],
      "metadata": {
        "id": "hDt-q0gBeAFH"
      },
      "execution_count": 463,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Rmse\n",
        "print(f' RMSE score :', np.sqrt(mean_squared_error(y_te,te_pred)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8V5b3HaweDaw",
        "outputId": "1f7511cf-2a84-4913-dd35-cb25b1ea7f56"
      },
      "execution_count": 464,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " RMSE score : 957012.1569152931\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 예측"
      ],
      "metadata": {
        "id": "8U-UAtOvL1kD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 테스트 셋에 예측해보기\n",
        "pred = x_model.predict(test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LLIuU9fxJ7Ut",
        "outputId": "043ec93d-bab0-496f-a159-cf94e2946c4c"
      },
      "execution_count": 483,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/base.py:444: UserWarning: X has feature names, but StandardScaler was fitted without feature names\n",
            "  f\"X has feature names, but {self.__class__.__name__} was fitted without\"\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data3.box_off_num = pred"
      ],
      "metadata": {
        "id": "987Ti2-zJ9u1"
      },
      "execution_count": 484,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data3.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "q7CPFjvoJ9xb",
        "outputId": "14d8388c-05bf-48ad-f94e-ec16050ba025"
      },
      "execution_count": 485,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         title   box_off_num\n",
              "0       용서는 없다  5.824110e+05\n",
              "1  아빠가 여자를 좋아해  9.931151e+05\n",
              "2          하모니  1.537193e+06\n",
              "3          의형제  1.315296e+06\n",
              "4        평행 이론  8.324809e+05"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-77dddeb4-60da-46f4-8565-644d5d204925\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>title</th>\n",
              "      <th>box_off_num</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>용서는 없다</td>\n",
              "      <td>5.824110e+05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>아빠가 여자를 좋아해</td>\n",
              "      <td>9.931151e+05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>하모니</td>\n",
              "      <td>1.537193e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>의형제</td>\n",
              "      <td>1.315296e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>평행 이론</td>\n",
              "      <td>8.324809e+05</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-77dddeb4-60da-46f4-8565-644d5d204925')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-77dddeb4-60da-46f4-8565-644d5d204925 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-77dddeb4-60da-46f4-8565-644d5d204925');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 485
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data3.to_csv('submission6.csv',index=False)"
      ],
      "metadata": {
        "id": "hfGtq4I8Ldfp"
      },
      "execution_count": 486,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 스터디 06/26\n",
        "\n",
        "* 데이터 탐색(EDA) 컬럼과 종속변수 관계를 꼼꼼하게 해서 분석하자\n",
        "\n",
        "* `plt.rc('font', size=12)`\n",
        "=> 전체 폰트 사이즈 크기를 키워주는 것\n",
        "\n",
        "* `resample('Y')`\n",
        "=> 연도별로 인덱스를 잡기\n",
        "\n",
        "* GridSerachCV를 할 때 파라미터를 너무 많이 넣으면 로딩이 튕긴다.\n",
        "\n",
        "* describe()를 할 때 평균에 비해 표준편차가 크다는 것은 분산이 크다는 것을 알 수 있다.\n",
        "$$\n",
        "\bSTD = \\sqrt{ Var }\n",
        "$$\n",
        " * 분산은 편차에 제곱을 하여 계산을 하였고, 실제  값에서 너무 멀어져 있다. 그래서 실제 값으로 근접 시키기 위해서 제곱근(루트)를 씌워준 것이다. (분산에서 제곱했으니, 반대로 제곱근을 씌운다.)\n",
        "즉 분산에 루트를 씌운것이 표준 편차(Standard deviation) \n",
        "\n",
        "* `cate_list = ['time',   'dir_prev_bfnum',   'dir_prev_num',   'num_staff'   ,'num_actor'   ,'box_off_num']`\n",
        "\n",
        "* `fig, ax = plt.subplots(2,3 , figsize = (20,16))`\n",
        "\n",
        "* `for idx, val in enumerate(cate_list):\n",
        "    i = idx // 3\n",
        "    j = idx % 3\n",
        "    sns.histplot(data= train, x = val, ax=ax[i,j])`\n",
        " \n",
        " `plt.show()`\n",
        "\n",
        "\n",
        "* `dt.strftime(%Y-%M-%d)`\n",
        "datetime -> 문자열로 바꾸기\n",
        "\n",
        "* train의 행을 확인 후 인덱스만 따로 빼놓고,\n",
        "concat으로 train,test 합치고 전처리 한번에 하기\n",
        "-> 중간의 결측치 행 제거를 해도 행으로 빠지기 때문에\n",
        "train의 행을 ex) [0,600) 해도 인덱스 자체로는 문제없음! (펭귄작업할때 써보기!!)"
      ],
      "metadata": {
        "id": "r3hYbry3Y_We"
      }
    }
  ]
}
